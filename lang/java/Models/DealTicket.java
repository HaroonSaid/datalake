/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DealTicket extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7711531455341483028L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DealTicket\",\"namespace\":\"Models\",\"fields\":[{\"name\":\"Symbol\",\"type\":\"string\"},{\"name\":\"OrderType\",\"type\":{\"type\":\"enum\",\"name\":\"OrderType\",\"symbols\":[\"Buy\",\"Sell\"]},\"doc\":\"The transaction order type\"},{\"name\":\"Quantity\",\"type\":\"int\",\"doc\":\"The quantity\"},{\"name\":\"Price\",\"type\":\"string\",\"doc\":\"The Price\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DealTicket> ENCODER =
      new BinaryMessageEncoder<DealTicket>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DealTicket> DECODER =
      new BinaryMessageDecoder<DealTicket>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DealTicket> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DealTicket> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DealTicket>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DealTicket to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DealTicket from a ByteBuffer. */
  public static DealTicket fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence Symbol;
  /** The transaction order type */
  @Deprecated public Models.OrderType OrderType;
  /** The quantity */
  @Deprecated public int Quantity;
  /** The Price */
  @Deprecated public java.lang.CharSequence Price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DealTicket() {}

  /**
   * All-args constructor.
   * @param Symbol The new value for Symbol
   * @param OrderType The transaction order type
   * @param Quantity The quantity
   * @param Price The Price
   */
  public DealTicket(java.lang.CharSequence Symbol, Models.OrderType OrderType, java.lang.Integer Quantity, java.lang.CharSequence Price) {
    this.Symbol = Symbol;
    this.OrderType = OrderType;
    this.Quantity = Quantity;
    this.Price = Price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Symbol;
    case 1: return OrderType;
    case 2: return Quantity;
    case 3: return Price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Symbol = (java.lang.CharSequence)value$; break;
    case 1: OrderType = (Models.OrderType)value$; break;
    case 2: Quantity = (java.lang.Integer)value$; break;
    case 3: Price = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Symbol' field.
   * @return The value of the 'Symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return Symbol;
  }

  /**
   * Sets the value of the 'Symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.Symbol = value;
  }

  /**
   * Gets the value of the 'OrderType' field.
   * @return The transaction order type
   */
  public Models.OrderType getOrderType() {
    return OrderType;
  }

  /**
   * Sets the value of the 'OrderType' field.
   * The transaction order type
   * @param value the value to set.
   */
  public void setOrderType(Models.OrderType value) {
    this.OrderType = value;
  }

  /**
   * Gets the value of the 'Quantity' field.
   * @return The quantity
   */
  public java.lang.Integer getQuantity() {
    return Quantity;
  }

  /**
   * Sets the value of the 'Quantity' field.
   * The quantity
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Integer value) {
    this.Quantity = value;
  }

  /**
   * Gets the value of the 'Price' field.
   * @return The Price
   */
  public java.lang.CharSequence getPrice() {
    return Price;
  }

  /**
   * Sets the value of the 'Price' field.
   * The Price
   * @param value the value to set.
   */
  public void setPrice(java.lang.CharSequence value) {
    this.Price = value;
  }

  /**
   * Creates a new DealTicket RecordBuilder.
   * @return A new DealTicket RecordBuilder
   */
  public static Models.DealTicket.Builder newBuilder() {
    return new Models.DealTicket.Builder();
  }

  /**
   * Creates a new DealTicket RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DealTicket RecordBuilder
   */
  public static Models.DealTicket.Builder newBuilder(Models.DealTicket.Builder other) {
    return new Models.DealTicket.Builder(other);
  }

  /**
   * Creates a new DealTicket RecordBuilder by copying an existing DealTicket instance.
   * @param other The existing instance to copy.
   * @return A new DealTicket RecordBuilder
   */
  public static Models.DealTicket.Builder newBuilder(Models.DealTicket other) {
    return new Models.DealTicket.Builder(other);
  }

  /**
   * RecordBuilder for DealTicket instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DealTicket>
    implements org.apache.avro.data.RecordBuilder<DealTicket> {

    private java.lang.CharSequence Symbol;
    /** The transaction order type */
    private Models.OrderType OrderType;
    /** The quantity */
    private int Quantity;
    /** The Price */
    private java.lang.CharSequence Price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Models.DealTicket.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.OrderType)) {
        this.OrderType = data().deepCopy(fields()[1].schema(), other.OrderType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Quantity)) {
        this.Quantity = data().deepCopy(fields()[2].schema(), other.Quantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Price)) {
        this.Price = data().deepCopy(fields()[3].schema(), other.Price);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DealTicket instance
     * @param other The existing instance to copy.
     */
    private Builder(Models.DealTicket other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.OrderType)) {
        this.OrderType = data().deepCopy(fields()[1].schema(), other.OrderType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Quantity)) {
        this.Quantity = data().deepCopy(fields()[2].schema(), other.Quantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Price)) {
        this.Price = data().deepCopy(fields()[3].schema(), other.Price);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'Symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return Symbol;
    }

    /**
      * Sets the value of the 'Symbol' field.
      * @param value The value of 'Symbol'.
      * @return This builder.
      */
    public Models.DealTicket.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Symbol' field has been set.
      * @return True if the 'Symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Symbol' field.
      * @return This builder.
      */
    public Models.DealTicket.Builder clearSymbol() {
      Symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'OrderType' field.
      * The transaction order type
      * @return The value.
      */
    public Models.OrderType getOrderType() {
      return OrderType;
    }

    /**
      * Sets the value of the 'OrderType' field.
      * The transaction order type
      * @param value The value of 'OrderType'.
      * @return This builder.
      */
    public Models.DealTicket.Builder setOrderType(Models.OrderType value) {
      validate(fields()[1], value);
      this.OrderType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'OrderType' field has been set.
      * The transaction order type
      * @return True if the 'OrderType' field has been set, false otherwise.
      */
    public boolean hasOrderType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'OrderType' field.
      * The transaction order type
      * @return This builder.
      */
    public Models.DealTicket.Builder clearOrderType() {
      OrderType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Quantity' field.
      * The quantity
      * @return The value.
      */
    public java.lang.Integer getQuantity() {
      return Quantity;
    }

    /**
      * Sets the value of the 'Quantity' field.
      * The quantity
      * @param value The value of 'Quantity'.
      * @return This builder.
      */
    public Models.DealTicket.Builder setQuantity(int value) {
      validate(fields()[2], value);
      this.Quantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Quantity' field has been set.
      * The quantity
      * @return True if the 'Quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Quantity' field.
      * The quantity
      * @return This builder.
      */
    public Models.DealTicket.Builder clearQuantity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Price' field.
      * The Price
      * @return The value.
      */
    public java.lang.CharSequence getPrice() {
      return Price;
    }

    /**
      * Sets the value of the 'Price' field.
      * The Price
      * @param value The value of 'Price'.
      * @return This builder.
      */
    public Models.DealTicket.Builder setPrice(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.Price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Price' field has been set.
      * The Price
      * @return True if the 'Price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Price' field.
      * The Price
      * @return This builder.
      */
    public Models.DealTicket.Builder clearPrice() {
      Price = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DealTicket build() {
      try {
        DealTicket record = new DealTicket();
        record.Symbol = fieldSetFlags()[0] ? this.Symbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.OrderType = fieldSetFlags()[1] ? this.OrderType : (Models.OrderType) defaultValue(fields()[1]);
        record.Quantity = fieldSetFlags()[2] ? this.Quantity : (java.lang.Integer) defaultValue(fields()[2]);
        record.Price = fieldSetFlags()[3] ? this.Price : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DealTicket>
    WRITER$ = (org.apache.avro.io.DatumWriter<DealTicket>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DealTicket>
    READER$ = (org.apache.avro.io.DatumReader<DealTicket>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
