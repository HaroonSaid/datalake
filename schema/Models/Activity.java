/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** User Activities */
@org.apache.avro.specific.AvroGenerated
public class Activity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8844963299758378259L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Activity\",\"namespace\":\"Models\",\"doc\":\"User Activities\",\"fields\":[{\"name\":\"UserId\",\"type\":\"string\",\"doc\":\"The UserId\"},{\"name\":\"Timestamp\",\"type\":\"long\",\"doc\":\"The recorded timestamp\"},{\"name\":\"ActivityType\",\"type\":{\"type\":\"enum\",\"name\":\"ActivityType\",\"symbols\":[\"UserProfile\",\"StockTrade\"]},\"doc\":\"The application activity Type\"},{\"name\":\"UserInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"UserInfo\",\"fields\":[{\"name\":\"First\",\"type\":\"string\"},{\"name\":\"Middle\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"Last\",\"type\":\"string\"}]}],\"doc\":\"The User Infor Profile Events\"},{\"name\":\"Ticket\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DealTicket\",\"fields\":[{\"name\":\"Symbol\",\"type\":\"string\"},{\"name\":\"OrderType\",\"type\":{\"type\":\"enum\",\"name\":\"OrderType\",\"symbols\":[\"Buy\",\"Sell\"]},\"doc\":\"The transaction order type\"},{\"name\":\"Quantity\",\"type\":\"int\",\"doc\":\"The quantity\"},{\"name\":\"Price\",\"type\":\"string\",\"doc\":\"The Price\"}]}],\"doc\":\"The Stock Transaction Deal Ticket Events\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Activity> ENCODER =
      new BinaryMessageEncoder<Activity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Activity> DECODER =
      new BinaryMessageDecoder<Activity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Activity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Activity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Activity>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Activity to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Activity from a ByteBuffer. */
  public static Activity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The UserId */
  @Deprecated public java.lang.CharSequence UserId;
  /** The recorded timestamp */
  @Deprecated public long Timestamp;
  /** The application activity Type */
  @Deprecated public Models.ActivityType ActivityType;
  /** The User Infor Profile Events */
  @Deprecated public Models.UserInfo UserInfo;
  /** The Stock Transaction Deal Ticket Events */
  @Deprecated public Models.DealTicket Ticket;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Activity() {}

  /**
   * All-args constructor.
   * @param UserId The UserId
   * @param Timestamp The recorded timestamp
   * @param ActivityType The application activity Type
   * @param UserInfo The User Infor Profile Events
   * @param Ticket The Stock Transaction Deal Ticket Events
   */
  public Activity(java.lang.CharSequence UserId, java.lang.Long Timestamp, Models.ActivityType ActivityType, Models.UserInfo UserInfo, Models.DealTicket Ticket) {
    this.UserId = UserId;
    this.Timestamp = Timestamp;
    this.ActivityType = ActivityType;
    this.UserInfo = UserInfo;
    this.Ticket = Ticket;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return UserId;
    case 1: return Timestamp;
    case 2: return ActivityType;
    case 3: return UserInfo;
    case 4: return Ticket;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: UserId = (java.lang.CharSequence)value$; break;
    case 1: Timestamp = (java.lang.Long)value$; break;
    case 2: ActivityType = (Models.ActivityType)value$; break;
    case 3: UserInfo = (Models.UserInfo)value$; break;
    case 4: Ticket = (Models.DealTicket)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'UserId' field.
   * @return The UserId
   */
  public java.lang.CharSequence getUserId() {
    return UserId;
  }

  /**
   * Sets the value of the 'UserId' field.
   * The UserId
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.UserId = value;
  }

  /**
   * Gets the value of the 'Timestamp' field.
   * @return The recorded timestamp
   */
  public java.lang.Long getTimestamp() {
    return Timestamp;
  }

  /**
   * Sets the value of the 'Timestamp' field.
   * The recorded timestamp
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.Timestamp = value;
  }

  /**
   * Gets the value of the 'ActivityType' field.
   * @return The application activity Type
   */
  public Models.ActivityType getActivityType() {
    return ActivityType;
  }

  /**
   * Sets the value of the 'ActivityType' field.
   * The application activity Type
   * @param value the value to set.
   */
  public void setActivityType(Models.ActivityType value) {
    this.ActivityType = value;
  }

  /**
   * Gets the value of the 'UserInfo' field.
   * @return The User Infor Profile Events
   */
  public Models.UserInfo getUserInfo() {
    return UserInfo;
  }

  /**
   * Sets the value of the 'UserInfo' field.
   * The User Infor Profile Events
   * @param value the value to set.
   */
  public void setUserInfo(Models.UserInfo value) {
    this.UserInfo = value;
  }

  /**
   * Gets the value of the 'Ticket' field.
   * @return The Stock Transaction Deal Ticket Events
   */
  public Models.DealTicket getTicket() {
    return Ticket;
  }

  /**
   * Sets the value of the 'Ticket' field.
   * The Stock Transaction Deal Ticket Events
   * @param value the value to set.
   */
  public void setTicket(Models.DealTicket value) {
    this.Ticket = value;
  }

  /**
   * Creates a new Activity RecordBuilder.
   * @return A new Activity RecordBuilder
   */
  public static Models.Activity.Builder newBuilder() {
    return new Models.Activity.Builder();
  }

  /**
   * Creates a new Activity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Activity RecordBuilder
   */
  public static Models.Activity.Builder newBuilder(Models.Activity.Builder other) {
    return new Models.Activity.Builder(other);
  }

  /**
   * Creates a new Activity RecordBuilder by copying an existing Activity instance.
   * @param other The existing instance to copy.
   * @return A new Activity RecordBuilder
   */
  public static Models.Activity.Builder newBuilder(Models.Activity other) {
    return new Models.Activity.Builder(other);
  }

  /**
   * RecordBuilder for Activity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Activity>
    implements org.apache.avro.data.RecordBuilder<Activity> {

    /** The UserId */
    private java.lang.CharSequence UserId;
    /** The recorded timestamp */
    private long Timestamp;
    /** The application activity Type */
    private Models.ActivityType ActivityType;
    /** The User Infor Profile Events */
    private Models.UserInfo UserInfo;
    private Models.UserInfo.Builder UserInfoBuilder;
    /** The Stock Transaction Deal Ticket Events */
    private Models.DealTicket Ticket;
    private Models.DealTicket.Builder TicketBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Models.Activity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.UserId)) {
        this.UserId = data().deepCopy(fields()[0].schema(), other.UserId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Timestamp)) {
        this.Timestamp = data().deepCopy(fields()[1].schema(), other.Timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ActivityType)) {
        this.ActivityType = data().deepCopy(fields()[2].schema(), other.ActivityType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.UserInfo)) {
        this.UserInfo = data().deepCopy(fields()[3].schema(), other.UserInfo);
        fieldSetFlags()[3] = true;
      }
      if (other.hasUserInfoBuilder()) {
        this.UserInfoBuilder = Models.UserInfo.newBuilder(other.getUserInfoBuilder());
      }
      if (isValidValue(fields()[4], other.Ticket)) {
        this.Ticket = data().deepCopy(fields()[4].schema(), other.Ticket);
        fieldSetFlags()[4] = true;
      }
      if (other.hasTicketBuilder()) {
        this.TicketBuilder = Models.DealTicket.newBuilder(other.getTicketBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Activity instance
     * @param other The existing instance to copy.
     */
    private Builder(Models.Activity other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.UserId)) {
        this.UserId = data().deepCopy(fields()[0].schema(), other.UserId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Timestamp)) {
        this.Timestamp = data().deepCopy(fields()[1].schema(), other.Timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ActivityType)) {
        this.ActivityType = data().deepCopy(fields()[2].schema(), other.ActivityType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.UserInfo)) {
        this.UserInfo = data().deepCopy(fields()[3].schema(), other.UserInfo);
        fieldSetFlags()[3] = true;
      }
      this.UserInfoBuilder = null;
      if (isValidValue(fields()[4], other.Ticket)) {
        this.Ticket = data().deepCopy(fields()[4].schema(), other.Ticket);
        fieldSetFlags()[4] = true;
      }
      this.TicketBuilder = null;
    }

    /**
      * Gets the value of the 'UserId' field.
      * The UserId
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return UserId;
    }

    /**
      * Sets the value of the 'UserId' field.
      * The UserId
      * @param value The value of 'UserId'.
      * @return This builder.
      */
    public Models.Activity.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.UserId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'UserId' field has been set.
      * The UserId
      * @return True if the 'UserId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'UserId' field.
      * The UserId
      * @return This builder.
      */
    public Models.Activity.Builder clearUserId() {
      UserId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Timestamp' field.
      * The recorded timestamp
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return Timestamp;
    }

    /**
      * Sets the value of the 'Timestamp' field.
      * The recorded timestamp
      * @param value The value of 'Timestamp'.
      * @return This builder.
      */
    public Models.Activity.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.Timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Timestamp' field has been set.
      * The recorded timestamp
      * @return True if the 'Timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Timestamp' field.
      * The recorded timestamp
      * @return This builder.
      */
    public Models.Activity.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ActivityType' field.
      * The application activity Type
      * @return The value.
      */
    public Models.ActivityType getActivityType() {
      return ActivityType;
    }

    /**
      * Sets the value of the 'ActivityType' field.
      * The application activity Type
      * @param value The value of 'ActivityType'.
      * @return This builder.
      */
    public Models.Activity.Builder setActivityType(Models.ActivityType value) {
      validate(fields()[2], value);
      this.ActivityType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ActivityType' field has been set.
      * The application activity Type
      * @return True if the 'ActivityType' field has been set, false otherwise.
      */
    public boolean hasActivityType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ActivityType' field.
      * The application activity Type
      * @return This builder.
      */
    public Models.Activity.Builder clearActivityType() {
      ActivityType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'UserInfo' field.
      * The User Infor Profile Events
      * @return The value.
      */
    public Models.UserInfo getUserInfo() {
      return UserInfo;
    }

    /**
      * Sets the value of the 'UserInfo' field.
      * The User Infor Profile Events
      * @param value The value of 'UserInfo'.
      * @return This builder.
      */
    public Models.Activity.Builder setUserInfo(Models.UserInfo value) {
      validate(fields()[3], value);
      this.UserInfoBuilder = null;
      this.UserInfo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'UserInfo' field has been set.
      * The User Infor Profile Events
      * @return True if the 'UserInfo' field has been set, false otherwise.
      */
    public boolean hasUserInfo() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'UserInfo' field and creates one if it doesn't exist yet.
     * The User Infor Profile Events
     * @return This builder.
     */
    public Models.UserInfo.Builder getUserInfoBuilder() {
      if (UserInfoBuilder == null) {
        if (hasUserInfo()) {
          setUserInfoBuilder(Models.UserInfo.newBuilder(UserInfo));
        } else {
          setUserInfoBuilder(Models.UserInfo.newBuilder());
        }
      }
      return UserInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'UserInfo' field
     * The User Infor Profile Events
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Models.Activity.Builder setUserInfoBuilder(Models.UserInfo.Builder value) {
      clearUserInfo();
      UserInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'UserInfo' field has an active Builder instance
     * The User Infor Profile Events
     * @return True if the 'UserInfo' field has an active Builder instance
     */
    public boolean hasUserInfoBuilder() {
      return UserInfoBuilder != null;
    }

    /**
      * Clears the value of the 'UserInfo' field.
      * The User Infor Profile Events
      * @return This builder.
      */
    public Models.Activity.Builder clearUserInfo() {
      UserInfo = null;
      UserInfoBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Ticket' field.
      * The Stock Transaction Deal Ticket Events
      * @return The value.
      */
    public Models.DealTicket getTicket() {
      return Ticket;
    }

    /**
      * Sets the value of the 'Ticket' field.
      * The Stock Transaction Deal Ticket Events
      * @param value The value of 'Ticket'.
      * @return This builder.
      */
    public Models.Activity.Builder setTicket(Models.DealTicket value) {
      validate(fields()[4], value);
      this.TicketBuilder = null;
      this.Ticket = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Ticket' field has been set.
      * The Stock Transaction Deal Ticket Events
      * @return True if the 'Ticket' field has been set, false otherwise.
      */
    public boolean hasTicket() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'Ticket' field and creates one if it doesn't exist yet.
     * The Stock Transaction Deal Ticket Events
     * @return This builder.
     */
    public Models.DealTicket.Builder getTicketBuilder() {
      if (TicketBuilder == null) {
        if (hasTicket()) {
          setTicketBuilder(Models.DealTicket.newBuilder(Ticket));
        } else {
          setTicketBuilder(Models.DealTicket.newBuilder());
        }
      }
      return TicketBuilder;
    }

    /**
     * Sets the Builder instance for the 'Ticket' field
     * The Stock Transaction Deal Ticket Events
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Models.Activity.Builder setTicketBuilder(Models.DealTicket.Builder value) {
      clearTicket();
      TicketBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Ticket' field has an active Builder instance
     * The Stock Transaction Deal Ticket Events
     * @return True if the 'Ticket' field has an active Builder instance
     */
    public boolean hasTicketBuilder() {
      return TicketBuilder != null;
    }

    /**
      * Clears the value of the 'Ticket' field.
      * The Stock Transaction Deal Ticket Events
      * @return This builder.
      */
    public Models.Activity.Builder clearTicket() {
      Ticket = null;
      TicketBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Activity build() {
      try {
        Activity record = new Activity();
        record.UserId = fieldSetFlags()[0] ? this.UserId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Timestamp = fieldSetFlags()[1] ? this.Timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.ActivityType = fieldSetFlags()[2] ? this.ActivityType : (Models.ActivityType) defaultValue(fields()[2]);
        if (UserInfoBuilder != null) {
          record.UserInfo = this.UserInfoBuilder.build();
        } else {
          record.UserInfo = fieldSetFlags()[3] ? this.UserInfo : (Models.UserInfo) defaultValue(fields()[3]);
        }
        if (TicketBuilder != null) {
          record.Ticket = this.TicketBuilder.build();
        } else {
          record.Ticket = fieldSetFlags()[4] ? this.Ticket : (Models.DealTicket) defaultValue(fields()[4]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Activity>
    WRITER$ = (org.apache.avro.io.DatumWriter<Activity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Activity>
    READER$ = (org.apache.avro.io.DatumReader<Activity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
