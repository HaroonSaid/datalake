// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: activity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Datalake.Schema {

  /// <summary>Holder for reflection information generated from activity.proto</summary>
  public static partial class ActivityReflection {

    #region Descriptor
    /// <summary>File descriptor for activity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ActivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5hY3Rpdml0eS5wcm90bxIPZGF0YWxha2Uuc2NoZW1hIr8BCgxVc2VyQWN0",
            "aXZpdHkSDgoGdXNlcklkGAEgASgJEkgKEHVzZXJBY3Rpdml0eVR5cGUYAiAB",
            "KA4yLi5kYXRhbGFrZS5zY2hlbWEuVXNlckFjdGl2aXR5LlVzZXJBY3Rpdml0",
            "eVR5cGUSDgoGc3lzdGVtGAMgASgJIkUKEFVzZXJBY3Rpdml0eVR5cGUSCwoH",
            "Q1JFQVRFRBAAEhMKD1BBU1NXT1JEQ0hBTkdFRBABEg8KC0RFQUNUSUFWVEVE",
            "EAIi2gIKD0FjY291bnRBY3Rpdml0eRIRCglhY2NvdW50SWQYASABKAkSQQoL",
            "YWNjb3VudFR5cGUYAiABKA4yLC5kYXRhbGFrZS5zY2hlbWEuQWNjb3VudEFj",
            "dGl2aXR5LkFjY291bnRUeXBlElEKE2FjY291bnRBY3Rpdml0eVR5cGUYAyAB",
            "KA4yNC5kYXRhbGFrZS5zY2hlbWEuQWNjb3VudEFjdGl2aXR5LkFjY291bnRB",
            "Y3Rpdml0eVR5cGUSEQoJb3RoZXJkYXRhGAQgASgJIlkKC0FjY291bnRUeXBl",
            "EgwKCENIRUNLSU5HEAASCgoGU0FWSU5HEAESDgoKUkVUSVJFTUVOVBACEgsK",
            "B0FOVU5JVFkQAxIGCgJHTBAEEgsKB01PUlRBR0UQBSIwChNBY2NvdW50QWN0",
            "aXZpdHlUeXBlEgsKB0NSRUFURUQQABIMCghBUkNISVZFRBABIoICCghBY3Rp",
            "dml0eRIOCgZ1c2VySWQYASABKAkSEQoJdGltZXN0YW1wGAIgASgDEjwKDGFj",
            "dGl2aXR5VHlwZRgDIAEoDjImLmRhdGFsYWtlLnNjaGVtYS5BY3Rpdml0eS5B",
            "Y3Rpdml0eVR5cGUSOQoPYWNjb3VudEFjdGl2aXR5GAQgASgLMiAuZGF0YWxh",
            "a2Uuc2NoZW1hLkFjY291bnRBY3Rpdml0eRIzCgx1c2VyQWN0aXZpdHkYBSAB",
            "KAsyHS5kYXRhbGFrZS5zY2hlbWEuVXNlckFjdGl2aXR5IiUKDEFjdGl2aXR5",
            "VHlwZRILCgdBY2NvdW50EAASCAoEVXNlchABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Datalake.Schema.UserActivity), global::Datalake.Schema.UserActivity.Parser, new[]{ "UserId", "UserActivityType", "System" }, null, new[]{ typeof(global::Datalake.Schema.UserActivity.Types.UserActivityType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Datalake.Schema.AccountActivity), global::Datalake.Schema.AccountActivity.Parser, new[]{ "AccountId", "AccountType", "AccountActivityType", "Otherdata" }, null, new[]{ typeof(global::Datalake.Schema.AccountActivity.Types.AccountType), typeof(global::Datalake.Schema.AccountActivity.Types.AccountActivityType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Datalake.Schema.Activity), global::Datalake.Schema.Activity.Parser, new[]{ "UserId", "Timestamp", "ActivityType", "AccountActivity", "UserActivity" }, null, new[]{ typeof(global::Datalake.Schema.Activity.Types.ActivityType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UserActivity : pb::IMessage<UserActivity> {
    private static readonly pb::MessageParser<UserActivity> _parser = new pb::MessageParser<UserActivity>(() => new UserActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Datalake.Schema.ActivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivity(UserActivity other) : this() {
      userId_ = other.userId_;
      userActivityType_ = other.userActivityType_;
      system_ = other.system_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActivity Clone() {
      return new UserActivity(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userActivityType" field.</summary>
    public const int UserActivityTypeFieldNumber = 2;
    private global::Datalake.Schema.UserActivity.Types.UserActivityType userActivityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datalake.Schema.UserActivity.Types.UserActivityType UserActivityType {
      get { return userActivityType_; }
      set {
        userActivityType_ = value;
      }
    }

    /// <summary>Field number for the "system" field.</summary>
    public const int SystemFieldNumber = 3;
    private string system_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string System {
      get { return system_; }
      set {
        system_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserActivityType != other.UserActivityType) return false;
      if (System != other.System) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (UserActivityType != 0) hash ^= UserActivityType.GetHashCode();
      if (System.Length != 0) hash ^= System.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (UserActivityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UserActivityType);
      }
      if (System.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(System);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UserActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserActivityType);
      }
      if (System.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(System);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActivity other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.UserActivityType != 0) {
        UserActivityType = other.UserActivityType;
      }
      if (other.System.Length != 0) {
        System = other.System;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            userActivityType_ = (global::Datalake.Schema.UserActivity.Types.UserActivityType) input.ReadEnum();
            break;
          }
          case 26: {
            System = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserActivity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UserActivityType {
        [pbr::OriginalName("CREATED")] Created = 0,
        [pbr::OriginalName("PASSWORDCHANGED")] Passwordchanged = 1,
        [pbr::OriginalName("DEACTIAVTED")] Deactiavted = 2,
      }

    }
    #endregion

  }

  public sealed partial class AccountActivity : pb::IMessage<AccountActivity> {
    private static readonly pb::MessageParser<AccountActivity> _parser = new pb::MessageParser<AccountActivity>(() => new AccountActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Datalake.Schema.ActivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountActivity(AccountActivity other) : this() {
      accountId_ = other.accountId_;
      accountType_ = other.accountType_;
      accountActivityType_ = other.accountActivityType_;
      otherdata_ = other.otherdata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountActivity Clone() {
      return new AccountActivity(this);
    }

    /// <summary>Field number for the "accountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 2;
    private global::Datalake.Schema.AccountActivity.Types.AccountType accountType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datalake.Schema.AccountActivity.Types.AccountType AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "accountActivityType" field.</summary>
    public const int AccountActivityTypeFieldNumber = 3;
    private global::Datalake.Schema.AccountActivity.Types.AccountActivityType accountActivityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datalake.Schema.AccountActivity.Types.AccountActivityType AccountActivityType {
      get { return accountActivityType_; }
      set {
        accountActivityType_ = value;
      }
    }

    /// <summary>Field number for the "otherdata" field.</summary>
    public const int OtherdataFieldNumber = 4;
    private string otherdata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Otherdata {
      get { return otherdata_; }
      set {
        otherdata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (AccountType != other.AccountType) return false;
      if (AccountActivityType != other.AccountActivityType) return false;
      if (Otherdata != other.Otherdata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (AccountActivityType != 0) hash ^= AccountActivityType.GetHashCode();
      if (Otherdata.Length != 0) hash ^= Otherdata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
      if (AccountType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AccountType);
      }
      if (AccountActivityType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AccountActivityType);
      }
      if (Otherdata.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Otherdata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (AccountActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountActivityType);
      }
      if (Otherdata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Otherdata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountActivity other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.AccountActivityType != 0) {
        AccountActivityType = other.AccountActivityType;
      }
      if (other.Otherdata.Length != 0) {
        Otherdata = other.Otherdata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
          case 16: {
            accountType_ = (global::Datalake.Schema.AccountActivity.Types.AccountType) input.ReadEnum();
            break;
          }
          case 24: {
            accountActivityType_ = (global::Datalake.Schema.AccountActivity.Types.AccountActivityType) input.ReadEnum();
            break;
          }
          case 34: {
            Otherdata = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AccountActivity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AccountType {
        [pbr::OriginalName("CHECKING")] Checking = 0,
        [pbr::OriginalName("SAVING")] Saving = 1,
        [pbr::OriginalName("RETIREMENT")] Retirement = 2,
        [pbr::OriginalName("ANUNITY")] Anunity = 3,
        [pbr::OriginalName("GL")] Gl = 4,
        [pbr::OriginalName("MORTAGE")] Mortage = 5,
      }

      public enum AccountActivityType {
        [pbr::OriginalName("CREATED")] Created = 0,
        [pbr::OriginalName("ARCHIVED")] Archived = 1,
      }

    }
    #endregion

  }

  public sealed partial class Activity : pb::IMessage<Activity> {
    private static readonly pb::MessageParser<Activity> _parser = new pb::MessageParser<Activity>(() => new Activity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Datalake.Schema.ActivityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity(Activity other) : this() {
      userId_ = other.userId_;
      timestamp_ = other.timestamp_;
      activityType_ = other.activityType_;
      accountActivity_ = other.accountActivity_ != null ? other.accountActivity_.Clone() : null;
      userActivity_ = other.userActivity_ != null ? other.userActivity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity Clone() {
      return new Activity(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "activityType" field.</summary>
    public const int ActivityTypeFieldNumber = 3;
    private global::Datalake.Schema.Activity.Types.ActivityType activityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datalake.Schema.Activity.Types.ActivityType ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "accountActivity" field.</summary>
    public const int AccountActivityFieldNumber = 4;
    private global::Datalake.Schema.AccountActivity accountActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datalake.Schema.AccountActivity AccountActivity {
      get { return accountActivity_; }
      set {
        accountActivity_ = value;
      }
    }

    /// <summary>Field number for the "userActivity" field.</summary>
    public const int UserActivityFieldNumber = 5;
    private global::Datalake.Schema.UserActivity userActivity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datalake.Schema.UserActivity UserActivity {
      get { return userActivity_; }
      set {
        userActivity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ActivityType != other.ActivityType) return false;
      if (!object.Equals(AccountActivity, other.AccountActivity)) return false;
      if (!object.Equals(UserActivity, other.UserActivity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
      if (accountActivity_ != null) hash ^= AccountActivity.GetHashCode();
      if (userActivity_ != null) hash ^= UserActivity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (ActivityType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ActivityType);
      }
      if (accountActivity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AccountActivity);
      }
      if (userActivity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserActivity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
      }
      if (accountActivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountActivity);
      }
      if (userActivity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserActivity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.ActivityType != 0) {
        ActivityType = other.ActivityType;
      }
      if (other.accountActivity_ != null) {
        if (accountActivity_ == null) {
          accountActivity_ = new global::Datalake.Schema.AccountActivity();
        }
        AccountActivity.MergeFrom(other.AccountActivity);
      }
      if (other.userActivity_ != null) {
        if (userActivity_ == null) {
          userActivity_ = new global::Datalake.Schema.UserActivity();
        }
        UserActivity.MergeFrom(other.UserActivity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 24: {
            activityType_ = (global::Datalake.Schema.Activity.Types.ActivityType) input.ReadEnum();
            break;
          }
          case 34: {
            if (accountActivity_ == null) {
              accountActivity_ = new global::Datalake.Schema.AccountActivity();
            }
            input.ReadMessage(accountActivity_);
            break;
          }
          case 42: {
            if (userActivity_ == null) {
              userActivity_ = new global::Datalake.Schema.UserActivity();
            }
            input.ReadMessage(userActivity_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Activity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ActivityType {
        [pbr::OriginalName("Account")] Account = 0,
        [pbr::OriginalName("User")] User = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
